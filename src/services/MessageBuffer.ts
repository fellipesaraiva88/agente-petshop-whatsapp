/**
 * Buffer de mensagens para concatenar msgs enviadas em sequ√™ncia
 * Comportamento humano: WhatsApp permite enviar mensagens fracionadas
 */

interface BufferedMessage {
  body: string;
  timestamp: number;
  message: any; // mensagem original completa
}

interface ChatBuffer {
  messages: BufferedMessage[];
  timer: NodeJS.Timeout | null;
  processing: boolean;
}

export class MessageBuffer {
  private buffers: Map<string, ChatBuffer>;

  // Tempo de espera ap√≥s √∫ltima mensagem para processar (ms)
  // AUMENTADO: pessoas digitam devagar no WhatsApp!
  private readonly WAIT_TIME = 8000; // 8 segundos (antes: 3s)

  // Tempo m√°ximo entre mensagens para considerar "sequ√™ncia" (ms)
  private readonly MAX_INTERVAL = 10000; // 10 segundos (antes: 5s)

  constructor() {
    this.buffers = new Map();
    console.log('üì¶ MessageBuffer inicializado (WAIT_TIME: 8s, MAX_INTERVAL: 10s)');
  }

  /**
   * Adiciona mensagem ao buffer e retorna Promise que resolve quando deve processar
   */
  public async addMessage(
    chatId: string,
    message: any,
    processCallback: (concatenatedBody: string, lastMessage: any) => Promise<void>
  ): Promise<void> {
    const now = Date.now();

    // Pega ou cria buffer para este chat
    if (!this.buffers.has(chatId)) {
      this.buffers.set(chatId, {
        messages: [],
        timer: null,
        processing: false,
      });
    }

    const buffer = this.buffers.get(chatId)!;

    // Se j√° est√° processando, ignora (evita duplicatas)
    if (buffer.processing) {
      console.log(`‚è∏Ô∏è  ${chatId}: J√° processando, ignorando mensagem duplicada`);
      return;
    }

    // Adiciona mensagem ao buffer
    buffer.messages.push({
      body: message.body,
      timestamp: now,
      message: message,
    });

    console.log(`\nüì® ========================================`);
    console.log(`üì® BUFFER: ${chatId.substring(0, 15)}...`);
    console.log(`üì® Mensagem ${buffer.messages.length}: "${message.body}"`);
    console.log(`üì® Total no buffer: ${buffer.messages.length} mensagens`);

    // Cancela timer anterior (se houver)
    if (buffer.timer) {
      clearTimeout(buffer.timer);
      console.log(`‚è±Ô∏è  Timer anterior CANCELADO (nova mensagem chegou)`);
    }

    // Cria novo timer para processar ap√≥s WAIT_TIME
    buffer.timer = setTimeout(async () => {
      try {
        console.log(`\n‚è∞ ========================================`);
        console.log(`‚è∞ TIMER DISPARADO! (${this.WAIT_TIME / 1000}s se passaram)`);
        console.log(`‚è∞ Iniciando processamento do buffer...`);
        console.log(`‚è∞ ========================================\n`);

        await this.processBuffer(chatId, processCallback);
      } catch (error) {
        console.error('\n‚ùå ========================================');
        console.error('‚ùå ERRO NO TIMER DO MESSAGE BUFFER:');
        console.error('‚ùå', error);
        console.error('‚ùå ========================================\n');

        // Limpa buffer mesmo em caso de erro
        const buf = this.buffers.get(chatId);
        if (buf) {
          buf.messages = [];
          buf.timer = null;
          buf.processing = false;
        }
      }
    }, this.WAIT_TIME);

    console.log(`‚è±Ô∏è  Novo timer: AGUARDANDO ${this.WAIT_TIME / 1000}s antes de processar`);
    console.log(`‚è±Ô∏è  (Se nova mensagem chegar, timer reinicia)`);
    console.log(`üì® ========================================\n`);
  }

  /**
   * Processa buffer concatenando mensagens
   */
  private async processBuffer(
    chatId: string,
    processCallback: (concatenatedBody: string, lastMessage: any) => Promise<void>
  ): Promise<void> {
    const buffer = this.buffers.get(chatId);
    if (!buffer || buffer.messages.length === 0) {
      return;
    }

    buffer.processing = true;
    console.log(`\nüîÑ ========================================`);
    console.log(`üîÑ PROCESSANDO BUFFER AGORA!`);
    console.log(`üîÑ Chat: ${chatId.substring(0, 20)}...`);
    console.log(`üîÑ Total de mensagens: ${buffer.messages.length}`);
    console.log(`üîÑ ========================================\n`);

    // Verifica se mensagens s√£o sequenciais (‚â§10s entre elas)
    const isSequential = this.areMessagesSequential(buffer.messages);

    if (isSequential && buffer.messages.length > 1) {
      // CONCATENA mensagens
      const concatenatedBody = buffer.messages
        .map(m => m.body)
        .join(' '); // Concatena com espa√ßo

      console.log(`‚úÖ CONCATENANDO (${buffer.messages.length} mensagens sequenciais):`);
      buffer.messages.forEach((m, i) => {
        const time = new Date(m.timestamp).toTimeString().substring(0, 8);
        console.log(`   ${i + 1}. [${time}] "${m.body}"`);
      });
      console.log(`\n‚úÖ RESULTADO FINAL: "${concatenatedBody}"\n`);

      // Usa a √∫ltima mensagem como base (cont√©m metadata correto)
      const lastMessage = buffer.messages[buffer.messages.length - 1].message;

      // Chama callback com corpo concatenado
      await processCallback(concatenatedBody, lastMessage);
    } else {
      // N√ÉO concatena - processa s√≥ a √∫ltima
      if (buffer.messages.length === 1) {
        console.log(`‚ÑπÔ∏è  Apenas 1 mensagem no buffer - processando normalmente`);
      } else {
        console.log(`‚ö†Ô∏è  Mensagens N√ÉO s√£o sequenciais (intervalo > ${this.MAX_INTERVAL / 1000}s)`);
        console.log(`‚ö†Ô∏è  Processando apenas a √∫ltima mensagem`);
      }
      const lastMsg = buffer.messages[buffer.messages.length - 1];
      console.log(`üì§ Processando: "${lastMsg.body}"\n`);
      await processCallback(lastMsg.body, lastMsg.message);
    }

    // Limpa buffer
    buffer.messages = [];
    buffer.timer = null;
    buffer.processing = false;

    console.log(`üßπ Buffer limpo para ${chatId}\n`);
  }

  /**
   * Verifica se mensagens s√£o sequenciais (‚â§10s entre elas)
   */
  private areMessagesSequential(messages: BufferedMessage[]): boolean {
    if (messages.length <= 1) {
      return false;
    }

    console.log(`üîç Verificando se ${messages.length} mensagens s√£o sequenciais:`);

    for (let i = 1; i < messages.length; i++) {
      const interval = messages[i].timestamp - messages[i - 1].timestamp;
      const intervalSec = (interval / 1000).toFixed(1);

      if (interval > this.MAX_INTERVAL) {
        console.log(`   ‚ùå Msg ${i} ‚Üí ${i + 1}: ${intervalSec}s (> ${this.MAX_INTERVAL / 1000}s MAX)`);
        return false;
      } else {
        console.log(`   ‚úÖ Msg ${i} ‚Üí ${i + 1}: ${intervalSec}s (OK)`);
      }
    }

    console.log(`‚úÖ Todas as mensagens s√£o sequenciais!\n`);
    return true;
  }

  /**
   * Limpa buffer de um chat espec√≠fico (√∫til para testes)
   */
  public clearBuffer(chatId: string): void {
    const buffer = this.buffers.get(chatId);
    if (buffer?.timer) {
      clearTimeout(buffer.timer);
    }
    this.buffers.delete(chatId);
    console.log(`üßπ Buffer manual limpo para ${chatId}`);
  }

  /**
   * Retorna estat√≠sticas dos buffers ativos
   */
  public getStats(): { activeBuffers: number; totalMessages: number } {
    let totalMessages = 0;
    this.buffers.forEach(buffer => {
      totalMessages += buffer.messages.length;
    });

    return {
      activeBuffers: this.buffers.size,
      totalMessages,
    };
  }
}
