import { SentimentType } from '../types/UserProfile';

/**
 * Decis√£o de rea√ß√£o
 */
export interface ReactionDecision {
  shouldReact: boolean;
  emoji?: string;
  reactOnly: boolean; // true = s√≥ reage, false = reage + responde com texto
  delayMs: number; // delay antes de reagir (1-3s √© natural)
}

/**
 * REACTIONDECIDER: Decide quando e como reagir a mensagens
 *
 * Comportamento humano no WhatsApp:
 * - Rea√ß√µes r√°pidas a fotos
 * - üëç para confirma√ß√µes simples
 * - Empatia com emojis em situa√ß√µes emocionais
 * - NEM SEMPRE reage (seria robotizado)
 */
export class ReactionDecider {

  /**
   * Decide se deve reagir e com qual emoji
   *
   * PLANO MINIMALISTA: Reage apenas em situa√ß√µes muito espec√≠ficas (~5% das mensagens)
   */
  public decide(
    message: any,
    sentiment: SentimentType,
    hasExtractedInfo: boolean
  ): ReactionDecision {

    const defaultDecision: ReactionDecision = {
      shouldReact: false,
      reactOnly: false,
      delayMs: 0,
    };

    // 1Ô∏è‚É£ FOTO/M√çDIA DO PET ‚Üí Rea√ß√£o ‚ù§Ô∏è (verifica√ß√£o correta de mimetype)
    if (this.hasMedia(message)) {
      return {
        shouldReact: true,
        emoji: '‚ù§Ô∏è',
        reactOnly: false, // reage + responde
        delayMs: this.randomDelay(800, 2000), // 0.8-2s
      };
    }

    // 2Ô∏è‚É£ CONFIRMA√á√ïES SIMPLES ‚Üí S√≥ üëç (sem texto)
    if (this.isSimpleConfirmation(message.body)) {
      return {
        shouldReact: true,
        emoji: 'üëç',
        reactOnly: true, // S√ì reage, n√£o envia texto
        delayMs: this.randomDelay(1000, 2500),
      };
    }

    // ‚ùå REMOVIDO: Rea√ß√µes baseadas em sentimento (animado, frustrado)
    // ‚ùå REMOVIDO: Rea√ß√µes para informa√ß√µes extra√≠das
    // MOTIVO: Plano MINIMALISTA - evita parecer rob√¥ que reage a tudo

    // 3Ô∏è‚É£ PADR√ÉO: N√£o reage (comportamento profissional)
    return defaultDecision;
  }

  /**
   * Verifica se mensagem tem m√≠dia (foto/v√≠deo)
   * Corrigido: verifica mimetype para evitar falsos positivos
   */
  private hasMedia(message: any): boolean {
    return message.hasMedia === true ||
           message.type === 'image' ||
           message.type === 'video' ||
           (message.media && message.media.mimetype &&
            (message.media.mimetype.startsWith('image/') ||
             message.media.mimetype.startsWith('video/')));
  }

  /**
   * Verifica se √© confirma√ß√£o simples (ok, sim, beleza, etc)
   */
  private isSimpleConfirmation(text: string): boolean {
    if (!text) return false;

    const lower = text.toLowerCase().trim();
    const confirmations = [
      'ok',
      'okk',
      'sim',
      'blz',
      'beleza',
      'certo',
      'entendi',
      'combinado',
      'ta bom',
      't√° bom',
      'pode ser',
    ];

    // Confirma√ß√£o simples = texto curto (< 15 chars) E palavra de confirma√ß√£o
    return lower.length < 15 && confirmations.some(c => lower === c || lower.includes(c));
  }

  /**
   * Delay aleat√≥rio entre min e max ms
   */
  private randomDelay(min: number, max: number): number {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  /**
   * Escolhe emoji aleat√≥rio de uma lista
   */
  private chooseRandomEmoji(emojis: string[]): string {
    return emojis[Math.floor(Math.random() * emojis.length)];
  }

  /**
   * Retorna emoji baseado em sentimento (fallback)
   */
  public emojiForSentiment(sentiment: SentimentType): string {
    switch (sentiment) {
      case 'animado': return 'üòä';
      case 'frustrado': return 'üòî';
      case 'urgente': return 'üö®';
      case 'positivo': return 'üëç';
      case 'negativo': return 'üòï';
      default: return 'üëç';
    }
  }
}
