import { PersonalityArchetype } from './PersonalityProfiler';
import { UserProfile } from './CustomerMemoryDB';

/**
 * üß† NEURO PERSUASION ENGINE
 *
 * Detecta sinais de irrita√ß√£o e aplica t√©cnicas de persuas√£o
 * baseadas em arqu√©tipo psicol√≥gico do cliente
 *
 * FUNCIONALIDADES:
 * 1. Detecta irrita√ß√£o em mensagens ‚Üí auto-stop
 * 2. Seleciona t√©cnica PNL baseada em arqu√©tipo
 * 3. Personaliza comandos embutidos
 * 4. Aplica reframing e ancoragem
 */
export class NeuroPersuasionEngine {
  /**
   * Palavras/frases que indicam irrita√ß√£o
   * Se detectadas, sistema para follow-ups
   */
  private readonly IRRITATION_SIGNALS = [
    // Direto/Agressivo
    'para',
    'pare',
    'chato',
    'chatice',
    'chata',
    'encher',
    'enche',
    'saco',
    'enchendo',
    'cala',
    'cale',
    'cansei',

    // Educado mas firme
    'nao quero',
    'n√£o quero',
    'nao me',
    'n√£o me',
    'deixa quieto',
    'me deixa',
    'para de',
    'pare de',

    // Frustra√ß√£o
    'ta me',
    'est√° me',
    'incomodando',
    'irritando',
    'perturbando',
    'estressando',

    // Rejei√ß√£o clara
    'nao tenho interesse',
    'n√£o tenho interesse',
    'nao to interessado',
    'n√£o to interessado',
    'nao me interessa',
    'n√£o me interessa',

    // Agress√£o
    'vai se',
    'vai tomar',
    'se fode',
    'se foda',

    // Spam
    'spam',
    'bloqueado',
    'bloqueada',
    'vou bloquear',
  ];

  /**
   * Detecta se cliente est√° irritado
   * @returns true se detectou irrita√ß√£o, false caso contr√°rio
   */
  public detectsIrritation(message: string): boolean {
    const normalized = message.toLowerCase().trim();

    return this.IRRITATION_SIGNALS.some(signal =>
      normalized.includes(signal)
    );
  }

  /**
   * Gera mensagem de desculpas se detectar irrita√ß√£o
   */
  public generateApologyMessage(): string {
    const apologies = [
      'desculpa! nao era pra incomodar\nqualquer coisa to aqui\nabracos',
      'foi mal! sei que deve ta corrido\nquando quiser me chama\ntudo bem?',
      'entendi! me desculpa\nqdo precisar to aqui\nvaleu',
      'tranquilo! nao queria te chatear\nqq coisa me avisa\nflw',
    ];

    return apologies[Math.floor(Math.random() * apologies.length)];
  }

  /**
   * Personaliza mensagem com comandos embutidos
   * Comandos embutidos funcionam em n√≠vel subliminar
   */
  public embedCommands(message: string, petName?: string): string {
    let personalized = message;

    // Substitui {pet} se dispon√≠vel
    if (petName) {
      personalized = personalized.replace(/{pet}/g, petName);
    }

    return personalized;
  }

  /**
   * Seleciona intensidade baseada em hist√≥rico de intera√ß√µes
   * Quanto mais o cliente interage, menor a intensidade
   */
  public adjustIntensity(
    profile: UserProfile,
    currentLevel: number
  ): 'low' | 'medium' | 'high' | 'extreme' {
    // Se cliente j√° respondeu antes (engajamento alto)
    if (profile.engagementScore && profile.engagementScore > 70) {
      // Reduz intensidade (cliente √© receptivo)
      if (currentLevel <= 3) return 'low';
      if (currentLevel <= 5) return 'medium';
      return 'high'; // Nunca extreme para clientes engajados
    }

    // Se cliente tem baixo engajamento
    if (profile.engagementScore && profile.engagementScore < 40) {
      // Aumenta intensidade (precisa de mais persuas√£o)
      if (currentLevel <= 2) return 'medium';
      if (currentLevel <= 4) return 'high';
      return 'extreme'; // Usa extreme nos √∫ltimos n√≠veis
    }

    // Padr√£o: cresce progressivamente
    if (currentLevel <= 2) return 'low';
    if (currentLevel <= 4) return 'medium';
    if (currentLevel <= 6) return 'high';
    return 'extreme';
  }

  /**
   * Aplica reframing (muda perspectiva)
   * Custo ‚Üí Investimento
   * Problema ‚Üí Oportunidade
   * Espera ‚Üí Risco
   */
  public applyReframing(
    message: string,
    context: 'cost' | 'problem' | 'delay'
  ): string {
    switch (context) {
      case 'cost':
        // "R$75" ‚Üí "investimento de R$75 na sa√∫de dele"
        return message.replace(
          /R\$(\d+)/g,
          'investimento de R$$1 na sa√∫de dele'
        );

      case 'problem':
        // "problema" ‚Üí "oportunidade de cuidar melhor"
        return message.replace(
          /problema/gi,
          'oportunidade de cuidar melhor'
        );

      case 'delay':
        // "esperar" ‚Üí "arriscar que piore"
        return message.replace(/esperar/gi, 'arriscar que piore');

      default:
        return message;
    }
  }

  /**
   * Ancoragem de pre√ßo
   * Mostra pre√ßo alto primeiro, depois desconto
   */
  public priceAnchoring(
    originalPrice: number,
    discountedPrice: number
  ): string {
    const savings = originalPrice - discountedPrice;
    const percentOff = Math.round((savings / originalPrice) * 100);

    return `de R$${originalPrice} por R$${discountedPrice}\neconomia de ${percentOff}% (R$${savings})`;
  }

  /**
   * Gera senso de urg√™ncia baseado em tempo real
   */
  public generateUrgency(hoursUntilClose: number): string {
    if (hoursUntilClose <= 1) {
      return 'ULTIMA HORA! fecha em menos de 1h';
    }
    if (hoursUntilClose <= 2) {
      return `so ${hoursUntilClose}h ate fechar`;
    }
    if (hoursUntilClose <= 4) {
      return `agenda fecha as ${new Date(Date.now() + hoursUntilClose * 60 * 60 * 1000).getHours()}h`;
    }
    return 'vagas limitadas hoje';
  }

  /**
   * Detecta se mensagem √© positiva (interesse)
   * vs neutra/negativa
   */
  public detectsSentiment(
    message: string
  ): 'positive' | 'neutral' | 'negative' {
    const normalized = message.toLowerCase();

    // Positivo
    const positiveSignals = [
      'sim',
      'quero',
      'pode',
      'beleza',
      'ok',
      'confirma',
      'fechado',
      'aceito',
      'vamos',
      'combinado',
      'top',
      'legal',
    ];

    if (positiveSignals.some(signal => normalized.includes(signal))) {
      return 'positive';
    }

    // Negativo
    const negativeSignals = [
      'nao',
      'n√£o',
      'nunca',
      'jamais',
      'impossivel',
      'nao da',
      'n√£o da',
      'nao posso',
      'n√£o posso',
    ];

    if (negativeSignals.some(signal => normalized.includes(signal))) {
      return 'negative';
    }

    return 'neutral';
  }

  /**
   * Conta quantas vezes tentou contato
   * Para evitar spam excessivo
   */
  public shouldContinueFollowUps(
    attemptCount: number,
    maxAttempts: number = 7
  ): boolean {
    return attemptCount < maxAttempts;
  }

  /**
   * Gera prova social din√¢mica
   * "X pessoas agendaram hoje"
   */
  public generateSocialProof(count: number = 12): string {
    const variations = [
      `${count} pets agendados hj`,
      `outros ${count} tutores ja confirmaram`,
      `${count} clientes garantiram vaga nas ultimas 3h`,
    ];

    return variations[Math.floor(Math.random() * variations.length)];
  }

  /**
   * Calcula qual t√©cnica usar baseada em arqu√©tipo
   */
  public getTechniqueForArchetype(
    archetype: PersonalityArchetype | string
  ): string {
    const techniques: Record<string, string> = {
      apressado: 'Escassez Temporal (deadline curto)',
      analitico: 'Dados + ROI (custo-benef√≠cio)',
      cetico: 'Prova Social + Autoridade',
      indeciso: 'Paradoxo da Escolha (2 op√ß√µes)',
      economico: 'Ancoragem de Pre√ßo (desconto)',
      default: 'Mix equilibrado de todas',
    };

    const key = archetype.toLowerCase();
    return techniques[key] || techniques.default;
  }

  /**
   * Loga tentativa de persuas√£o (para an√°lise)
   */
  public logPersuasionAttempt(
    chatId: string,
    level: number,
    technique: string,
    success: boolean
  ): void {
    console.log(`üß† Neuro-Followup L${level} para ${chatId}:`);
    console.log(`   T√©cnica: ${technique}`);
    console.log(`   Resultado: ${success ? 'Converteu ‚úÖ' : 'Sem resposta ‚è≥'}`);
  }
}
